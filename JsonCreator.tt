
<#@ template debug="True" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="$(TargetDir)\Utility" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data.SqlClient" #>
{
"originalTableName" : "<#= TableName #>",
"apiTableName" : "<#= TableName #>",
 "columns" :[
 <# 
 try
 {
		using (SqlConnection connection = new SqlConnection(ConnectionString))
		{
			connection.Open();

			using (SqlCommand command = new SqlCommand(@"SELECT c.COLUMN_NAME,c.DATA_TYPE, c.IS_NULLABLE, c.CHARACTER_MAXIMUM_LENGTH,pk.CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.COLUMNS c
LEFT JOIN (
            SELECT ku.TABLE_CATALOG,ku.TABLE_SCHEMA,ku.TABLE_NAME,ku.COLUMN_NAME,ku.CONSTRAINT_NAME
            FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS tc
            INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS ku
                ON tc.CONSTRAINT_TYPE = 'PRIMARY KEY'
                AND tc.CONSTRAINT_NAME = ku.CONSTRAINT_NAME
         )   pk 
ON  c.TABLE_CATALOG = pk.TABLE_CATALOG
            AND c.TABLE_SCHEMA = pk.TABLE_SCHEMA
            AND c.TABLE_NAME = pk.TABLE_NAME
            AND c.COLUMN_NAME = pk.COLUMN_NAME
			WHERE c.TABLE_NAME = @TableName AND c.TABLE_SCHEMA = @SchemaName
ORDER BY c.TABLE_SCHEMA,c.TABLE_NAME, c.ORDINAL_POSITION", connection))
			{
				command.Parameters.AddWithValue("@TableName", TableName);
				command.Parameters.AddWithValue("@SchemaName", SchemaName);
				using (SqlDataReader reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						 var columnName = reader["COLUMN_NAME"].ToString();
						 var dataType = reader["DATA_TYPE"].ToString();
						 var isNullable = reader["IS_NULLABLE"].ToString();
						 var propertyType = Utility.CustomMethods.GetDataType(dataType);
						 var dbLength = reader["CHARACTER_MAXIMUM_LENGTH"].ToString();
						 bool isPrimary = false;

						 if(!DBNull.Value.Equals(reader["CONSTRAINT_NAME"]))
						 {
							isPrimary = true;
						 }

						 var apiColumnName = "";
						 
						 if(isPrimary)
						 {
							if(columnName.EndsWith("#"))
							{
								apiColumnName = columnName.Remove(columnName.Length - 1, 1);
								apiColumnName = apiColumnName + "Id";
							}
							else
							{
								apiColumnName = columnName;
							}
						 }
						 else
						 {
							if(columnName.EndsWith("#"))
							{
								apiColumnName = columnName.Remove(columnName.Length - 1, 1);
								apiColumnName = apiColumnName + "No";
							}
							else
							{
								apiColumnName = columnName;
							}
						 }
							
						 // If we can't map it, skip it
						 if (!string.IsNullOrWhiteSpace(propertyType))
						 {
							// Handle nullable columns by making the type nullable
							if (isNullable.Equals("YES", StringComparison.OrdinalIgnoreCase) && propertyType != "string")
							{
								propertyType += "?";
							}
	#>
	{
	"originalColumnName" : "<#= columnName #>",
	"apiColumnName" : "<#= apiColumnName #>",
	"dataType" : "<#= propertyType #>",
	"isNullable" : "<#= isNullable #>",
	"dbType" : "<#= dataType #>",
	"dbLength" : "<#= dbLength #>",
	"isPrimary" : "<#= isPrimary #>",
	"baseProperty" : "True",
	"omit" : "False"
	},
		<#
						 }
					}
					
				}
			}
		}
		}
		catch(Exception ex)
		{
		Console.WriteLine(ex);

		}
		#>
	]
}
<#
Utility.CustomMethods.SaveOutput(OutputPath, TableName, ".json", this.GenerationEnvironment.ToString());
#>
<#+
public string TableName { get; set; }
public string SchemaName { get; set; }
public string ConnectionString { get; set; }
public string OutputPath { get; set; }
#>